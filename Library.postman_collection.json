{
	"info": {
		"_postman_id": "094ececb-e0f2-447d-ac30-7c4a203c2897",
		"name": "Library",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38552175"
	},
	"item": [
		{
			"name": "AddBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Assertions validation - response\r",
							"pm.collectionVariables.set(\"flag\",false)\r",
							"const jsonData = pm.response.json()\r",
							"var req = JSON.parse(pm.request.body.raw)\r",
							"console.log(jsonData)\r",
							"const bookId = jsonData.ID\r",
							"pm.environment.set(\"book_id\",bookId)\r",
							"\r",
							"\r",
							"function cleanupScript()\r",
							"{\r",
							"\tconst book_id =generateBookId()\r",
							"\tpm.environment.set(\"book_id\",book_id)\r",
							"    pm.collectionVariables.set(\"flag\",true)\r",
							"\tpm.execution.setNextRequest(\"DeleteBook\")\r",
							"    \r",
							"}\r",
							"\r",
							"function generateBookId()\r",
							"{\r",
							"\tconst expected_id = req.isbn+req.aisle\r",
							"\treturn expected_id\r",
							"}\r",
							"\r",
							"pm.test(\"Validation Status Code is 200\", function()\r",
							"{\r",
							"\ttry{\r",
							"        pm.response.to.have.status(200);\r",
							"        pm.expect(jsonData).have.property(\"Msg\");\r",
							"        pm.expect(jsonData.Msg).to.eql(\"successfully added\");\r",
							"\t}\r",
							"\tcatch(err)\r",
							"\t{\r",
							"\t\tif(jsonData.Msg.includes(\"Exists\"))\r",
							"\t\t{\r",
							"\t\t\tcleanupScript()\r",
							"\t\t}\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"headers cookies responsetime validation\", function()\r",
							"{\r",
							"\tpm.response.to.have.header(\"Content-Type\");\r",
							"\tpm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"\r",
							"\tpm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"\tpm.expect(pm.response.text()).to.include(\"successfully added\")\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"ID logic validation\", function()\r",
							"{\r",
							"\t\r",
							"\tconst expected_id = generateBookId()\r",
							"\tpm.expect(expected_id).to.eql(bookId)\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"//RS45464\r",
							"console.log(pm.globals.get(\"companyCode\"));\r",
							"const code = pm.globals.get(\"companyCode\");\r",
							"const val = pm.variables.replaceIn('{{$randomInt}}');\r",
							"pm.collectionVariables.set(\"isbn\",code+val)\r",
							"pm.collectionVariables.set(\"book_name\",pm.iterationData.get(\"BookName\"))\r",
							"console.log(pm.collectionVariables.get(\"book_name\"))\r",
							"pm.collectionVariables.set(\"author_name\",pm.iterationData.get(\"Author\"))\r",
							"console.log(pm.collectionVariables.get(\"author_name\"))"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\r\n\"name\":\"{{book_name}}\",\r\n\"isbn\":\"{{isbn}}\",\r\n\"aisle\":\"2212237\",\r\n\"author\":\"{{author_name}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/Addbook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"Addbook.php"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const getBookResponse = pm.response.json()\r",
							"const schema = {\r",
							"  \"type\": \"array\",\r",
							"  \"items\": [\r",
							"    {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"book_name\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"isbn\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"aisle\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"author\": {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"book_name\",\r",
							"        \"isbn\",\r",
							"        \"aisle\",\r",
							"        \"author\"\r",
							"      ]\r",
							"    }\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"validate the Json response logic\", function(){\r",
							"    console.log(getBookResponse);\r",
							"    pm.expect(getBookResponse[0].author).to.eql(pm.collectionVariables.get(\"author_name\"));\r",
							"})\r",
							"pm.test(\"validate the Json response schema\", function(){\r",
							"\tpm.response.to.have.status(200)\r",
							"\tpm.response.to.have.jsonSchema(schema)\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/Library/GetBook.php?ID={{book_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"GetBook.php"
					],
					"query": [
						{
							"key": "ID",
							"value": "{{book_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBook",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema ={\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"msg\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"msg\"\r",
							"  ]\r",
							"}\r",
							"pm.test(\"validate the Json response code\", function(){\r",
							"\tpm.response.to.have.status(200)\r",
							"\tpm.response.to.have.jsonSchema(schema)\r",
							"\tconst jsonData = pm.response.json()\r",
							"\tpm.expect(jsonData.msg).to.eql(\"book is successfully deleted\")\r",
							"    if(pm.collectionVariables.get(\"flag\")){\r",
							"    pm.execution.setNextRequest(\"AddBook\")\r",
							"    }\r",
							"\t\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \r\n\"ID\" : \"{{book_id}}\"\r\n \r\n} \r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/Library/DeleteBook.php",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"Library",
						"DeleteBook.php"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "isbn",
			"value": "",
			"type": "string"
		},
		{
			"key": "author_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "book_name",
			"value": "",
			"type": "string"
		},
		{
			"key": "flag",
			"value": "false",
			"type": "string"
		}
	]
}